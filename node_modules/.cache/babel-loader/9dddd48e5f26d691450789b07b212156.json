{"ast":null,"code":"/**\n * React Router Native v6.2.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { createElement, useEffect, useRef, useMemo, useCallback } from 'react';\nimport { TouchableHighlight, BackHandler, Linking } from 'react-native';\nimport { MemoryRouter, useNavigate, useLocation } from 'react-router';\nexport { MemoryRouter, Navigate, Outlet, Route, Router, Routes, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, createRoutesFromChildren, generatePath, matchPath, matchRoutes, renderMatches, resolvePath, useHref, useInRouterContext, useLocation, useMatch, useNavigate, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRoutes } from 'react-router';\nimport URLSearchParams from '@ungap/url-search-params';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar _excluded = [\"onPress\", \"replace\", \"state\", \"to\"];\nvar _jsxFileName = \"/home/runner/work/react-router/react-router/packages/react-router-native/index.tsx\";\n\nfunction NativeRouter(props) {\n  return createElement(MemoryRouter, _extends({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 10\n    }\n  }));\n}\n\nfunction Link(_ref) {\n  var onPress = _ref.onPress,\n      _ref$replace = _ref.replace,\n      replace = _ref$replace === void 0 ? false : _ref$replace,\n      state = _ref.state,\n      to = _ref.to,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var internalOnPress = useLinkPressHandler(to, {\n    replace: replace,\n    state: state\n  });\n\n  function handlePress(event) {\n    if (onPress) onPress(event);\n\n    if (!event.defaultPrevented) {\n      internalOnPress(event);\n    }\n  }\n\n  return createElement(TouchableHighlight, _extends({}, rest, {\n    onPress: handlePress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 10\n    }\n  }));\n}\n\nvar HardwareBackPressEventType = \"hardwareBackPress\";\nvar URLEventType = \"url\";\n\nfunction useLinkPressHandler(to) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      replace = _ref2.replace,\n      state = _ref2.state;\n\n  var navigate = useNavigate();\n  return function handlePress() {\n    navigate(to, {\n      replace: replace,\n      state: state\n    });\n  };\n}\n\nfunction useHardwareBackButton() {\n  useEffect(function () {\n    function handleHardwardBackPress() {\n      return undefined;\n    }\n\n    BackHandler.addEventListener(HardwareBackPressEventType, handleHardwardBackPress);\n    return function () {\n      BackHandler.removeEventListener(HardwareBackPressEventType, handleHardwardBackPress);\n    };\n  }, []);\n}\n\nfunction useDeepLinking() {\n  var navigate = useNavigate();\n  useEffect(function () {\n    var current = true;\n    Linking.getInitialURL().then(function (url) {\n      if (current) {\n        if (url) navigate(trimScheme(url));\n      }\n    });\n    return function () {\n      current = false;\n    };\n  }, [navigate]);\n  useEffect(function () {\n    function handleURLChange(event) {\n      navigate(trimScheme(event.url));\n    }\n\n    Linking.addEventListener(URLEventType, handleURLChange);\n    return function () {\n      Linking.removeEventListener(URLEventType, handleURLChange);\n    };\n  }, [navigate]);\n}\n\nfunction trimScheme(url) {\n  return url.replace(/^.*?:\\/\\//, \"\");\n}\n\nfunction useSearchParams(defaultInit) {\n  var defaultSearchParamsRef = useRef(createSearchParams(defaultInit));\n  var location = useLocation();\n  var searchParams = useMemo(function () {\n    var searchParams = createSearchParams(location.search);\n\n    var _loop = function _loop(key) {\n      if (!searchParams.has(key)) {\n        defaultSearchParamsRef.current.getAll(key).forEach(function (value) {\n          searchParams.append(key, value);\n        });\n      }\n    };\n\n    for (var _iterator = _createForOfIteratorHelperLoose(defaultSearchParamsRef.current.keys()), _step; !(_step = _iterator()).done;) {\n      var key = _step.value;\n\n      _loop(key);\n    }\n\n    return searchParams;\n  }, [location.search]);\n  var navigate = useNavigate();\n  var setSearchParams = useCallback(function (nextInit, navigateOpts) {\n    navigate(\"?\" + createSearchParams(nextInit), navigateOpts);\n  }, [navigate]);\n  return [searchParams, setSearchParams];\n}\n\nfunction createSearchParams() {\n  var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce(function (memo, key) {\n    var value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(function (v) {\n      return [key, v];\n    }) : [[key, value]]);\n  }, []));\n}\n\nexport { Link, NativeRouter, createSearchParams, useHardwareBackButton as useAndroidBackButton, useDeepLinking, useHardwareBackButton, useLinkPressHandler, useSearchParams };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA0HgBA,aAAaC,OAA0B;AACrD,uBAAQC,YAAR,EAAOC,aAAkBF,KAAlB;AAAAG;AAAAC;AAAAC;AAAAC;AAAA;AAAA,IAAP;AACD;;AAAA,SAaeC,IAbf,CAaMC,IAbN,EAmBa;AAAA,MALZC,OAKY,QALZA,OAKY;AAAA,0BAJZC,OAIY;AAAA,MAJZA,OAIY,6BAJF,KAIE;AAAA,MAHZC,KAGY,QAHZA,KAGY;AAAA,MAFZC,EAEY,QAFZA,EAEY;AAAA,MADTC,IACS;;AACZ,MAAIC,eAAe,GAAGC,mBAAmB,CAACH,EAAD,EAAK;AAAEF,WAAO,EAAPA,OAAF;AAAWC,SAAK,EAALA;AAAX,GAAL,CAAzC;;AACA,WAASK,WAAT,CAAqBC,KAArB,EAAmD;AACjD,QAAIR,OAAJ,EAAaA,OAAO,CAACQ,KAAD,CAAPR;;AACb,QAAI,CAACQ,KAAK,CAACC,gBAAX,EAA6B;AAC3BJ,qBAAe,CAACG,KAAD,CAAfH;AAEH;AAED;;AAAA,uBAAQK,kBAAR,EAAOjB,aAAwBW,IAAxB;AAA8BJ,WAAO,EAAEO,WAAvC;AAAAb;AAAAC;AAAAC;AAAAC;AAAA;AAAA,IAAP;AAOF;;AAAA,IAAMc,0BAA0B,GAAG,mBAAnC;AACA,IAAMC,YAAY,GAAG,KAArB;;AAAA,SAOgBN,mBAPhB,CAQEH,EARF,EAgB0C;AAAA,kFADpC,EACoC;AAAA,MANtCF,OAMsC,SANtCA,OAMsC;AAAA,MALtCC,KAKsC,SALtCA,KAKsC;;AACxC,MAAIW,QAAQ,GAAGC,WAAW,EAA1B;AACA,kBAAgBP,WAAhB,GAA8B;AAC5BM,YAAQ,CAACV,EAAD,EAAK;AAAEF,aAAO,EAAPA,OAAF;AAAWC,WAAK,EAALA;AAAX,KAAL,CAARW;AADF;AAGD;;AAAA,SAKeE,qBALf,GAKuC;AACtCC,YAAgB,YAAM;AACpB,aAASC,uBAAT,GAAmC;AACjC,aAAOC,SAAP;AAUFC;;AAAAA,eAAW,CAACC,gBAAZD,CACER,0BADFQ,EAEEF,uBAFFE;AAKA,uBAAa;AACXA,iBAAW,CAACE,mBAAZF,CACER,0BADFQ,EAEEF,uBAFFE;AADF;AAjBF,KAuBG,EAvBH;AAwBD;;AAAA,SAQeG,cARf,GAQgC;AAC/B,MAAIT,QAAQ,GAAGC,WAAW,EAA1B;AAGAE,YAAgB,YAAM;AACpB,QAAIO,OAAO,GAAG,IAAd;AAEAC,WAAO,CAACC,aAARD,GAAwBE,IAAxBF,CAA6B,eAAO;AAClC,UAAID,OAAJ,EAAa;AACX,YAAII,GAAJ,EAASd,QAAQ,CAACe,UAAU,CAACD,GAAD,CAAX,CAARd;AAEZ;AAJD;AAMA,uBAAa;AACXU,aAAO,GAAG,KAAVA;AADF;AATF,KAYG,CAACV,QAAD,CAZH;AAeAG,YAAgB,YAAM;AACpB,aAASa,eAAT,CAAyBrB,KAAzB,EAAiD;AAC/CK,cAAQ,CAACe,UAAU,CAACpB,KAAK,CAACmB,GAAP,CAAX,CAARd;AAGFW;;AAAAA,WAAO,CAACJ,gBAARI,CAAyBZ,YAAzBY,EAAuCK,eAAvCL;AAEA,uBAAa;AACXA,aAAO,CAACH,mBAARG,CAA4BZ,YAA5BY,EAA0CK,eAA1CL;AADF;AAPF,KAUG,CAACX,QAAD,CAVH;AAaF;;AAAA,SAASe,UAAT,CAAoBD,GAApB,EAAiC;AAC/B,SAAOA,GAAG,CAAC1B,OAAJ0B,CAAY,WAAZA,EAAyB,EAAzBA,CAAP;AACD;;AAAA,SAMeG,eANf,CAOCC,WAPD,EAQwC;AACvC,MAAIC,sBAAsB,GAAGhB,OAAaiB,kBAAkB,CAACF,WAAD,CAA/B,CAA7B;AAEA,MAAIG,QAAQ,GAAGC,WAAW,EAA1B;AACA,MAAIC,YAAY,GAAGpB,QAAc,YAAM;AACrC,QAAIoB,YAAY,GAAGH,kBAAkB,CAACC,QAAQ,CAACG,MAAV,CAArC;;AADqC,+BAG5BC,GAH4B;AAInC,UAAI,CAACF,YAAY,CAACG,GAAbH,CAAiBE,GAAjBF,CAAL,EAA4B;AAC1BJ,8BAAsB,CAACT,OAAvBS,CAA+BQ,MAA/BR,CAAsCM,GAAtCN,EAA2CS,OAA3CT,CAAmD,iBAAS;AAC1DI,sBAAY,CAACM,MAAbN,CAAoBE,GAApBF,EAAyBO,KAAzBP;AADF;AALiC;AAAA;;AAGrC,yDAAgBJ,sBAAsB,CAACT,OAAvBS,CAA+BY,IAA/BZ,EAAhB,wCAAuD;AAAA,UAA9CM,GAA8C;;AAAAO,YAA9CP,GAA8C;AAQvD;;AAAA,WAAOF,YAAP;AAXiB,KAYhB,CAACF,QAAQ,CAACG,MAAV,CAZgB,CAAnB;AAcA,MAAIxB,QAAQ,GAAGC,WAAW,EAA1B;AACA,MAAIgC,eAAmC,GAAG9B,YACxC,UAAC+B,QAAD,EAAWC,YAAX,EAA4B;AAC1BnC,YAAQ,CAAC,MAAMoB,kBAAkB,CAACc,QAAD,CAAzB,EAAqCC,YAArC,CAARnC;AAFsC,KAIxC,CAACA,QAAD,CAJwC,CAA1C;AAOA,SAAO,CAACuB,YAAD,EAAeU,eAAf,CAAP;AACD;;AAAA,SAoCeb,kBApCf,GAsCkB;AAAA,MADjBgB,IACiB,uEADW,EACX;AACjB,aAAWC,eAAX,CACE,OAAOD,IAAP,KAAgB,QAAhB,IACAE,KAAK,CAACC,OAAND,CAAcF,IAAdE,CADA,IAEAF,IAAI,YAAYC,eAFhB,GAGID,IAHJ,GAIII,MAAM,CAACT,IAAPS,CAAYJ,IAAZI,EAAkBC,MAAlBD,CAAyB,UAACE,IAAD,EAAOjB,GAAP,EAAe;AACtC,QAAIK,KAAK,GAAGM,IAAI,CAACX,GAAD,CAAhB;AACA,WAAOiB,IAAI,CAACC,MAALD,CACLJ,KAAK,CAACC,OAAND,CAAcR,KAAdQ,IAAuBR,KAAK,CAACc,GAANd,CAAU,aAAC;AAAA,aAAI,CAACL,GAAD,EAAMoB,CAAN,CAAJ;AAAX,MAAvBP,GAAkD,CAAC,CAACb,GAAD,EAAMK,KAAN,CAAD,CAD7CY,CAAP;AAFF,KAKG,EALHF,CALN;AAYD","names":["NativeRouter","props","MemoryRouter","_extends","__source","fileName","lineNumber","columnNumber","Link","_ref","onPress","replace","state","to","rest","internalOnPress","useLinkPressHandler","handlePress","event","defaultPrevented","TouchableHighlight","HardwareBackPressEventType","URLEventType","navigate","useNavigate","useHardwareBackButton","React","handleHardwardBackPress","undefined","BackHandler","addEventListener","removeEventListener","useDeepLinking","current","Linking","getInitialURL","then","url","trimScheme","handleURLChange","useSearchParams","defaultInit","defaultSearchParamsRef","createSearchParams","location","useLocation","searchParams","search","key","has","getAll","forEach","append","value","keys","_loop","setSearchParams","nextInit","navigateOpts","init","URLSearchParams","Array","isArray","Object","reduce","memo","concat","map","v"],"sources":["C:\\Users\\kayod\\Desktop\\RealEstate\\packages\\react-router-native\\index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport {\n  BackHandler,\n  GestureResponderEvent,\n  Linking,\n  TouchableHighlight,\n  TouchableHighlightProps\n} from \"react-native\";\nimport {\n  MemoryRouter,\n  MemoryRouterProps,\n  Navigate,\n  NavigateOptions,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  createRoutesFromChildren,\n  generatePath,\n  matchRoutes,\n  matchPath,\n  resolvePath,\n  renderMatches,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigate,\n  useNavigationType,\n  useOutlet,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useOutletContext\n} from \"react-router\";\nimport type { To } from \"react-router\";\n\nimport URLSearchParams from \"@ungap/url-search-params\";\n\n////////////////////////////////////////////////////////////////////////////////\n// RE-EXPORTS\n////////////////////////////////////////////////////////////////////////////////\n\n// Note: Keep in sync with react-router exports!\nexport {\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  createRoutesFromChildren,\n  generatePath,\n  matchRoutes,\n  matchPath,\n  resolvePath,\n  renderMatches,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigate,\n  useNavigationType,\n  useOutlet,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useOutletContext\n};\n\nexport type {\n  IndexRouteProps,\n  LayoutRouteProps,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  NavigationType,\n  Navigator,\n  OutletProps,\n  Params,\n  Path,\n  PathMatch,\n  PathRouteProps,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RoutesProps,\n  To\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext\n} from \"react-router\";\n\n////////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n////////////////////////////////////////////////////////////////////////////////\n\nexport interface NativeRouterProps extends MemoryRouterProps {}\n\n/**\n * A <Router> that runs on React Native.\n */\nexport function NativeRouter(props: NativeRouterProps) {\n  return <MemoryRouter {...props} />;\n}\n\nexport interface LinkProps extends TouchableHighlightProps {\n  children?: React.ReactNode;\n  onPress?: (event: GestureResponderEvent) => void;\n  replace?: boolean;\n  state?: any;\n  to: To;\n}\n\n/**\n * A <TouchableHighlight> that navigates to a different URL when touched.\n */\nexport function Link({\n  onPress,\n  replace = false,\n  state,\n  to,\n  ...rest\n}: LinkProps) {\n  let internalOnPress = useLinkPressHandler(to, { replace, state });\n  function handlePress(event: GestureResponderEvent) {\n    if (onPress) onPress(event);\n    if (!event.defaultPrevented) {\n      internalOnPress(event);\n    }\n  }\n\n  return <TouchableHighlight {...rest} onPress={handlePress} />;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// HOOKS\n////////////////////////////////////////////////////////////////////////////////\n\nconst HardwareBackPressEventType = \"hardwareBackPress\";\nconst URLEventType = \"url\";\n\n/**\n * Handles the press behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same press behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkPressHandler(\n  to: To,\n  {\n    replace,\n    state\n  }: {\n    replace?: boolean;\n    state?: any;\n  } = {}\n): (event: GestureResponderEvent) => void {\n  let navigate = useNavigate();\n  return function handlePress() {\n    navigate(to, { replace, state });\n  };\n}\n\n/**\n * Enables support for the hardware back button on Android.\n */\nexport function useHardwareBackButton() {\n  React.useEffect(() => {\n    function handleHardwardBackPress() {\n      return undefined;\n      // TODO: The implementation will be something like this\n      // if (history.index === 0) {\n      //   return false; // home screen\n      // } else {\n      //   history.back();\n      //   return true;\n      // }\n    }\n\n    BackHandler.addEventListener(\n      HardwareBackPressEventType,\n      handleHardwardBackPress\n    );\n\n    return () => {\n      BackHandler.removeEventListener(\n        HardwareBackPressEventType,\n        handleHardwardBackPress\n      );\n    };\n  }, []);\n}\n\nexport { useHardwareBackButton as useAndroidBackButton };\n\n/**\n * Enables deep linking, both on the initial app launch and for\n * subsequent incoming links.\n */\nexport function useDeepLinking() {\n  let navigate = useNavigate();\n\n  // Get the initial URL\n  React.useEffect(() => {\n    let current = true;\n\n    Linking.getInitialURL().then(url => {\n      if (current) {\n        if (url) navigate(trimScheme(url));\n      }\n    });\n\n    return () => {\n      current = false;\n    };\n  }, [navigate]);\n\n  // Listen for URL changes\n  React.useEffect(() => {\n    function handleURLChange(event: { url: string }) {\n      navigate(trimScheme(event.url));\n    }\n\n    Linking.addEventListener(URLEventType, handleURLChange);\n\n    return () => {\n      Linking.removeEventListener(URLEventType, handleURLChange);\n    };\n  }, [navigate]);\n}\n\nfunction trimScheme(url: string) {\n  return url.replace(/^.*?:\\/\\//, \"\");\n}\n\n/**\n * A convenient wrapper for accessing individual query parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n\n  let location = useLocation();\n  let searchParams = React.useMemo(() => {\n    let searchParams = createSearchParams(location.search);\n\n    for (let key of defaultSearchParamsRef.current.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParamsRef.current.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n\n    return searchParams;\n  }, [location.search]);\n\n  let navigate = useNavigate();\n  let setSearchParams: SetURLSearchParams = React.useCallback(\n    (nextInit, navigateOpts) => {\n      navigate(\"?\" + createSearchParams(nextInit), navigateOpts);\n    },\n    [navigate]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\ntype SetURLSearchParams = (\n  nextInit?: URLSearchParamsInit | undefined,\n  navigateOpts?: NavigateOptions | undefined\n) => void;\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n"]},"metadata":{},"sourceType":"module"}